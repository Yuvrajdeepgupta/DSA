# Topic: How to Traverse a HashMap in Java

------------------------------------------------
üìå Problem Context:
In Java, a HashMap stores key-value pairs.  
Many times, we need to **iterate over a HashMap** to access keys, values, or both.  
There are multiple ways to traverse a HashMap ‚Äî interviewer may ask for different approaches.

------------------------------------------------
üí° Intuition:
A HashMap doesn‚Äôt maintain insertion order.  
So when traversing, you usually get entries in arbitrary order.  
Traversal depends on whether you need:
- Only keys
- Only values
- Both keys & values (entries)

------------------------------------------------
üõ†Ô∏è Approaches to Traverse HashMap:

// 1. Using entrySet() - most common
for (Map.Entry<Integer, String> entry : map.entrySet()) {
    System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
}

// 2. Using keySet()
for (Integer key : map.keySet()) {
    System.out.println("Key: " + key + ", Value: " + map.get(key));
}

// 3. Using values()
for (String val : map.values()) {
    System.out.println("Value: " + val);
}

// 4. Using Iterator with entrySet()
Iterator<Map.Entry<Integer, String>> it = map.entrySet().iterator();
while (it.hasNext()) {
    Map.Entry<Integer, String> entry = it.next();
    System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
}

// 5. Using Java 8 forEach with Lambda
map.forEach((key, value) -> {
    System.out.println("Key: " + key + ", Value: " + value);
});

// 6. Using Java 8 Streams
map.entrySet().stream()
   .forEach(entry -> System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue()));

-----------------------------------------------------------------------------------------------
/////CODE TUTORIAL//////
-----------------------------------------------------------------------------------------------

import java.util.*;

public class HashMapTraversalTemplate 
{
    public static void main(String[] args) 
    {
        // Step 1: Create & Populate HashMap
        HashMap<Integer, String> map = new HashMap<>();
        map.put(1, "Apple");
        map.put(2, "Banana");
        map.put(3, "Mango");
        map.put(4, "Orange");

        // ============================================================
        // Approach 1: Traversing using entrySet() with for-each loop
        // ============================================================
        System.out.println("Approach 1: Using entrySet() with for-each loop");
        for (Map.Entry<Integer, String> entry : map.entrySet()) 
        {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        // ============================================================
        // Approach 2: Traversing using keySet() (only keys, then get value)
        // ============================================================
        System.out.println("\nApproach 2: Using keySet()");
        for (Integer key : map.keySet()) 
        {
            System.out.println("Key = " + key + ", Value = " + map.get(key));
        }

        // ============================================================
        // Approach 3: Traversing using values() (only values)
        // ============================================================
        System.out.println("\nApproach 3: Using values()");
        for (String value : map.values()) 
        {
            System.out.println("Value = " + value);
        }

        // ============================================================
        // Approach 4: Using Iterator with entrySet()
        // ============================================================
        System.out.println("\nApproach 4: Using Iterator on entrySet()");
        Iterator<Map.Entry<Integer, String>> itr = map.entrySet().iterator();
        while (itr.hasNext()) 
        {
            Map.Entry<Integer, String> entry = itr.next();
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        // ============================================================
        // Approach 5: Using forEach method (Java 8+)
        // ============================================================
        System.out.println("\nApproach 5: Using forEach (Java 8+ Lambda)");
        map.forEach((key, value) -> System.out.println("Key = " + key + ", Value = " + value));

        // ============================================================
        // Approach 6: Using streams (Java 8+)
        // ============================================================
        System.out.println("\nApproach 6: Using streams");
        map.entrySet()
           .stream()
           .forEach(entry -> System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue()));

        // ============================================================
        // Approach 7: Using Map.Entry<> in enhanced for loop (Java 9+)
        // ============================================================
        System.out.println("\nApproach 7: Using Map.entry<> (Java 9+)");
        for (Map.Entry<Integer, String> entry : map.entrySet()) 
        {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        // Done ‚úÖ
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
-VAR KEYWORD-

// -------------------------------
// var keyword in Java
// -------------------------------
// Introduced in Java 10
// Used for type inference ‚Üí compiler automatically figures out the type
// Works only for local variables (inside methods, loops, etc.)
// Not allowed for fields, method parameters, or return types

// Example:
var num = 10;        // compiler infers int
var name = "Gupta";  // compiler infers String


// -------------------------------
// Traversing a HashMap using var
// -------------------------------
import java.util.*;

class Demo {
    public static void main(String[] args) {
        HashMap<Integer, String> map = new HashMap<>();
        map.put(1, "Apple");
        map.put(2, "Banana");
        map.put(3, "Mango");

        // Using var in enhanced for loop
        for (var pair : map.entrySet()) {
            // pair is of type Map.Entry<Integer, String>
            System.out.println(pair.getKey() + " -> " + pair.getValue());
        }
    }
}

/*
Output:
1 -> Apple
2 -> Banana
3 -> Mango
*/


// ======================================================================
// Summary (Yuvraj Way):
// - entrySet() ‚Üí best when you need both key and value
// - keySet()   ‚Üí best when you only care about keys (but fetching value needs map.get())
// - values()   ‚Üí best when you only care about values
// - Iterator   ‚Üí useful if you want to remove items while iterating
// - forEach()  ‚Üí clean, modern style with lambda (Java 8+)
// - streams    ‚Üí best if you want filtering/mapping/advanced ops
// - Map.entry<> is shorthand available from Java 9+
//
// TC: O(n) for all traversals
// SC: O(1) (only iterators/references are created)
//
// ======================================================================