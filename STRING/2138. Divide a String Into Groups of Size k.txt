class Solution {
    public String[] divideString(String s, int k, char fill) 
    {
        int n=s.length();

        int groups=n/k;
        int remaining=n%k;
        if(remaining>0){remaining=1;}
        String ans[]=new String[groups+remaining];
        
        int c=0,j=0;
        while(groups-->0)
        {
            StringBuilder temp=new StringBuilder();
            for(int i=0;i<k;i++)
            {
                temp.append(s.charAt(j++));
            }

            ans[c++]=temp.toString();
        }
        
        if(remaining>0)
        {	
        	StringBuilder temp=new StringBuilder();
        	while(j<n)
        	{
        		temp.append(s.charAt(j));
        		j++;
        	}
        	
        	while(temp.length()<k)
        	{
        		temp.append(fill);
        	}
        	ans[c++]=temp.toString();
        }
        
       return ans;
    }
}


/****************************Another Approach************************/
class Solution {
    public String[] divideString(String str, int k, char fill) 
    {
		 	int n=str.length();

	        int remaining=n%k;

	        StringBuilder s=new StringBuilder(str);
	        if(remaining>0)
	        {
	            remaining=k-n%k;
	            while(remaining-->0)
	            {
	                s.append(fill);
	            }
	        }
	        
	        n=s.length();
	    
	        int groups=n/k;
	        
	        String ans[]=new String[groups];
	        int c=0,j=0;
	        while(groups-->0)
	        {
	            StringBuilder temp=new StringBuilder();
	            for(int i=0;i<k;i++)
	            {
	                temp.append(s.charAt(j++));
	            }

	            ans[c++]=temp.toString();
	        }
	        
	      return ans;
    }
}